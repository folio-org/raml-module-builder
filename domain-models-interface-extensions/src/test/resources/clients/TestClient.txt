
package org.folio.rest.client;
import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.net.URLEncoder;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import io.vertx.core.AsyncResult;
import io.vertx.core.Handler;
import io.vertx.core.buffer.Buffer;
import io.vertx.ext.web.client.HttpResponse;
import io.vertx.ext.web.client.WebClient;
import io.vertx.ext.web.client.WebClientOptions;
import org.folio.rest.tools.utils.VertxUtils;
/**
 * Auto-generated code - based on class org.folio.rest.jaxrs.resource.TestResource
 *
 */
public class TestResourceClient {
    private String tenantId;
    private String token;
    private String okapiUrl;
    private WebClientOptions options;
    private WebClient httpClient;
    public TestResourceClient(String okapiUrl, String tenantId, String token, boolean keepAlive, int connTO, int idleTO) {
        // Auto-generated code
        // - generated by       org.folio.rest.tools.ClientGenerator
        // - generated based on org.folio.rest.jaxrs.resource.TestResourceResource
        this.tenantId = tenantId;
        this.token = token;
        this.okapiUrl = okapiUrl;
        options = new WebClientOptions();
        options.setLogActivity(true);
        options.setKeepAlive(keepAlive);
        options.setConnectTimeout(connTO);
        options.setIdleTimeout(idleTO);
        httpClient = WebClient.create(VertxUtils.getVertxFromContextOrNew(), options);
    }
    public TestResourceClient(String okapiUrl, String tenantId, String token, boolean keepAlive) {
        // Auto-generated code
        // - generated by       org.folio.rest.tools.ClientGenerator
        // - generated based on org.folio.rest.jaxrs.resource.TestResourceResource
        this(okapiUrl, tenantId, token, keepAlive, 2000, 5000);
    }
    public TestResourceClient(String okapiUrl, String tenantId, String token) {
        // Auto-generated code
        // - generated by       org.folio.rest.tools.ClientGenerator
        // - generated based on org.folio.rest.jaxrs.resource.TestResourceResource
        this(okapiUrl, tenantId, token, true, 2000, 5000);
    }
    /**
     * @deprecated  use a constructor that takes a full okapiUrl instead
     *
     */
    @Deprecated
    public TestResourceClient(String host, int port, String tenantId, String token, boolean keepAlive, int connTO, int idleTO) {
        // Auto-generated code
        // - generated by       org.folio.rest.tools.ClientGenerator
        // - generated based on org.folio.rest.jaxrs.resource.TestResourceResource
        this(((("http://"+ host)+":")+ port), tenantId, token, keepAlive, connTO, idleTO);
    }
    /**
     * @deprecated  use a constructor that takes a full okapiUrl instead
     *
     */
    @Deprecated
    public TestResourceClient(String host, int port, String tenantId, String token, boolean keepAlive) {
        // Auto-generated code
        // - generated by       org.folio.rest.tools.ClientGenerator
        // - generated based on org.folio.rest.jaxrs.resource.TestResourceResource
        this(host, port, tenantId, token, keepAlive, 2000, 5000);
    }
    /**
     * @deprecated  use a constructor that takes a full okapiUrl instead
     *
     */
    @Deprecated
    public TestResourceClient(String host, int port, String tenantId, String token) {
        // Auto-generated code
        // - generated by       org.folio.rest.tools.ClientGenerator
        // - generated based on org.folio.rest.jaxrs.resource.TestResourceResource
        this(host, port, tenantId, token, true, 2000, 5000);
    }
    /**
     * Convenience constructor for tests ONLY!<br>Connect to localhost on 8081 as folio_demo tenant.@deprecated  use a constructor that takes a full okapiUrl instead
     *
     */
    @Deprecated
    public TestResourceClient() {
        // Auto-generated code
        // - generated by       org.folio.rest.tools.ClientGenerator
        // - generated based on org.folio.rest.jaxrs.resource.TestResourceResource
        this("localhost", 8081, "folio_demo", "folio_demo", false, 2000, 5000);
    }
    /**
     * Service endpoint "unittests"+queryParams.toString()
     *
     */
    public void getRmbtests(String name, Boolean success, Handler<AsyncResult<HttpResponse<Buffer>>> responseHandler)
        throws UnsupportedEncodingException
    {
        // Auto-generated code
        // - generated by       org.folio.rest.tools.ClientGenerator
        // - generated based on org.folio.rest.jaxrs.resource.TestResourceResource
        StringBuilder queryParams = new StringBuilder("?");
        if (name!= null) {
            queryParams.append("name=");
            queryParams.append(URLEncoder.encode(name, "UTF-8"));
            queryParams.append("&");
        }
        if (success!= null) {
            queryParams.append("success=");
            queryParams.append(success);
            queryParams.append("&");
        }
        io.vertx.ext.web.client.HttpRequest<Buffer> request = httpClient.requestAbs(io.vertx.core.http.HttpMethod.GET, okapiUrl+"unittests"+queryParams.toString());
        request.putHeader("Accept", "application/json");
        if (tenantId!= null) {
            request.putHeader("X-Okapi-Token", token);
            request.putHeader("x-okapi-tenant", tenantId);
        }
        if (okapiUrl!= null) {
            request.putHeader("X-Okapi-Url", okapiUrl);
        }
        request.send(responseHandler);
    }
    /**
     * Service endpoint "unittestsbooks"+queryParams.toString()
     *
     */
    public void getRmbtestsBooks(String author, Date publicationDate, BigDecimal rating, String isbn, String[] facets, Handler<AsyncResult<HttpResponse<Buffer>>> responseHandler)
        throws UnsupportedEncodingException
    {
        // Auto-generated code
        // - generated by       org.folio.rest.tools.ClientGenerator
        // - generated based on org.folio.rest.jaxrs.resource.TestResourceResource
        StringBuilder queryParams = new StringBuilder("?");
        if (author!= null) {
            queryParams.append("author=");
            queryParams.append(URLEncoder.encode(author, "UTF-8"));
            queryParams.append("&");
        }
        if (publicationDate!= null) {
            queryParams.append("publicationDate=");
            queryParams.append(DateTimeFormatter.ISO_LOCAL_DATE_TIME.format(ZonedDateTime.ofInstant(publicationDate.toInstant(), ZoneId.of("UTC"))));
            queryParams.append("&");
        }
        if (rating!= null) {
            queryParams.append("rating=");
            queryParams.append(rating);
            queryParams.append("&");
        }
        if (isbn!= null) {
            queryParams.append("isbn=");
            queryParams.append(URLEncoder.encode(isbn, "UTF-8"));
            queryParams.append("&");
        }
        if (facets!= null) {
            queryParams.append("facets=");
            if(facets.getClass().isArray()){queryParams.append(String.join("&facets=",facets));}
            queryParams.append("&");
        }
        io.vertx.ext.web.client.HttpRequest<Buffer> request = httpClient.requestAbs(io.vertx.core.http.HttpMethod.GET, okapiUrl+"unittestsbooks"+queryParams.toString());
        request.putHeader("Accept", "application/json");
        if (tenantId!= null) {
            request.putHeader("X-Okapi-Token", token);
            request.putHeader("x-okapi-tenant", tenantId);
        }
        if (okapiUrl!= null) {
            request.putHeader("X-Okapi-Url", okapiUrl);
        }
        request.send(responseHandler);
    }
}
