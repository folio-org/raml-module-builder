diff --git a/domain-models-runtime/pom.xml b/domain-models-runtime/pom.xml
index e747cda7..99122695 100644
--- a/domain-models-runtime/pom.xml
+++ b/domain-models-runtime/pom.xml
@@ -55,6 +55,11 @@
       <groupId>io.vertx</groupId>
       <artifactId>vertx-web-client</artifactId>
     </dependency>
+    <dependency>
+      <groupId>org.apache.logging.log4j</groupId>
+      <artifactId>log4j-slf4j-impl</artifactId>
+      <version>2.14.0</version>
+    </dependency>
     <dependency>
       <groupId>io.rest-assured</groupId>
       <artifactId>rest-assured</artifactId>
@@ -116,11 +121,6 @@
         </exclusion>
       </exclusions>
     </dependency>
-    <dependency>
-      <groupId>de.flapdoodle.embed</groupId>
-      <artifactId>de.flapdoodle.embed.process</artifactId>
-      <version>2.0.5</version>
-    </dependency>
 
     <dependency>
       <groupId>org.postgresql</groupId>
diff --git a/domain-models-runtime/src/test/java/org/folio/rest/impl/TenantAPIIT.java b/domain-models-runtime/src/test/java/org/folio/rest/impl/TenantAPIIT.java
index 3e6be136..5d745c35 100644
--- a/domain-models-runtime/src/test/java/org/folio/rest/impl/TenantAPIIT.java
+++ b/domain-models-runtime/src/test/java/org/folio/rest/impl/TenantAPIIT.java
@@ -7,6 +7,7 @@ import static org.mockito.Mockito.*;
 
 import java.io.IOException;
 import java.text.SimpleDateFormat;
+import java.util.Collections;
 import java.util.Date;
 import java.util.HashMap;
 import java.util.List;
@@ -29,7 +30,6 @@ import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.Timeout;
 import org.junit.runner.RunWith;
-import de.flapdoodle.embed.process.collections.Collections;
 import freemarker.template.TemplateException;
 import io.vertx.core.AsyncResult;
 import io.vertx.core.Context;
@@ -276,7 +276,7 @@ public class TenantAPIIT {
   @Test
   public void postWithSqlFailure(TestContext context) {
     PostgresClient postgresClient = mock(PostgresClient.class);
-    List<String> failureList = Collections.newArrayList("first failure");
+    List<String> failureList = Collections.singletonList("first failure");
     when(postgresClient.runSQLFile(anyString(), anyBoolean())).thenReturn(Future.succeededFuture(failureList));
     TenantAPI tenantAPI = new TenantAPI() {
       @Override
diff --git a/domain-models-runtime/src/test/java/org/folio/rest/persist/PostgresClientIT.java b/domain-models-runtime/src/test/java/org/folio/rest/persist/PostgresClientIT.java
index c3574c7f..033aa3c1 100644
--- a/domain-models-runtime/src/test/java/org/folio/rest/persist/PostgresClientIT.java
+++ b/domain-models-runtime/src/test/java/org/folio/rest/persist/PostgresClientIT.java
@@ -455,9 +455,24 @@ public class PostgresClientIT {
 
   @Test
   public void deleteByIdNullConnection(TestContext context) {
+/*
     createFoo(context).delete(null, FOO, randomUuid(), context.asyncAssertFailure(fail -> {
       context.assertTrue(fail instanceof NullPointerException);
     }));
+    */
+    String sql = "DO $$ BEGIN "
+        + "RAISE WARNING 'optimistic lock violation id=f0fef6e4-6430-4142-8023-9d5527e056a2, versions: 2!=3' USING "
+        + "SCHEMA='diku_mod_users', TABLE='user_groups', ERRCODE='55F56'; "
+        + "END $$";
+    createFoo(context).execute(sql, context.asyncAssertSuccess(x -> {
+      System.out.println("x");
+      try {
+        Thread.sleep(1000);
+      } catch (InterruptedException e) {
+        // TODO Auto-generated catch block
+        e.printStackTrace();
+      }
+    }));
   }
 
   private void deleteByCqlWrapper(TestContext context, String key) throws FieldException {
@@ -2692,12 +2707,12 @@ public class PostgresClientIT {
 
   @Test
   public void selectStreamTxException(TestContext context) {
-    postgresClient().selectStream(null, "SELECT 1", context.asyncAssertFailure());
+    postgresClient().selectStream(Future.failedFuture("fail"), "SELECT 1", context.asyncAssertFailure());
   }
 
   @Test
   public void selectStreamParamTxException(TestContext context) {
-    postgresClient().selectStream(null, "SELECT 1", Tuple.tuple(), context.asyncAssertFailure());
+    postgresClient().selectStream(Future.failedFuture("fail"), "SELECT 1", Tuple.tuple(), context.asyncAssertFailure());
   }
 
   @Test
diff --git a/domain-models-runtime/src/test/resources/log4j2-test.properties.x b/domain-models-runtime/src/test/resources/log4j2-test.properties.x
index 48964d0a..ec3e8428 100644
--- a/domain-models-runtime/src/test/resources/log4j2-test.properties.x
+++ b/domain-models-runtime/src/test/resources/log4j2-test.properties.x
@@ -14,6 +14,8 @@ appender.console.name = STDOUT
 appender.console.layout.type = PatternLayout
 appender.console.layout.pattern = %d{HH:mm:ss} [$${FolioLoggingContext:requestid}] [$${FolioLoggingContext:tenantid}] [$${FolioLoggingContext:userid}] [$${FolioLoggingContext:moduleid}] %-5p %-20.20C{1} %m%n
 
-rootLogger.level = info
-rootLogger.appenderRefs = info
+rootLogger.level = debug
+rootLogger.appenderRefs = debug
+#rootLogger.level = info
+#rootLogger.appenderRefs = info
 rootLogger.appenderRef.stdout.ref = STDOUT
